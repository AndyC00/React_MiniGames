{"version":3,"file":"static/js/212.97e003fd.chunk.js","mappings":"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","sources":["2048.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst SIZE = 4;\r\nconst WILDCARD = -1;\r\n\r\nconst CELL_PX = 80; // height and width for .cell2048 (css modify needed if changed)\r\nconst GAP_PX = 10;  // gap for .grid2048\r\nconst PAD_PX = 10;  // padding for .grid2048 (css modify needed if changed)\r\n\r\n// ------------------ helper functions ------------------\r\nfunction emptyBoard(size) {\r\n  return Array.from({ length: size }, () => Array(size).fill(0));\r\n}\r\n\r\nfunction getEmptyCells(board) {\r\n  const cells = [];\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[r].length; c++) {\r\n      if (board[r][c] === 0) cells.push([r, c]);\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction addRandomTile(board) {\r\n  const empties = getEmptyCells(board);\r\n  if (empties.length === 0) return board;\r\n\r\n  const [r, c] = empties[Math.floor(Math.random() * empties.length)];\r\n  const next = board.map(row => row.slice());\r\n\r\n  if (Math.random() < 0.3) next[r][c] = WILDCARD;  // 30% chance to generate ??\r\n  else next[r][c] = Math.random() < 0.9 ? 2 : 4; // then the lefting 10% chance to be 4\r\n\r\n  return next;\r\n}\r\n\r\nfunction initBoard() {\r\n  let b = emptyBoard(SIZE);\r\n  b = addRandomTile(b);\r\n  b = addRandomTile(b);\r\n  return b;\r\n}\r\n\r\nfunction canMerge(a, b) {\r\n  const aWild = a === WILDCARD;\r\n  const bWild = b === WILDCARD;\r\n  return (a === b && !aWild) || (aWild !== bWild);\r\n}\r\n\r\nfunction mergedValue(a, b) {\r\n  const aWild = a === WILDCARD;\r\n  const bWild = b === WILDCARD;\r\n  if (aWild && bWild) return 0;\r\n  const num = aWild ? b : a;\r\n  return num * 2;\r\n}\r\n\r\nfunction rotateBoardLeft(board) {\r\n  const N = board.length;\r\n  const res = emptyBoard(N);\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      res[N - 1 - c][r] = board[r][c];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction rotateBoardRight(board) {\r\n  const N = board.length;\r\n  const res = emptyBoard(N);\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      res[c][N - 1 - r] = board[r][c];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction flipBoard(board) {\r\n  return board.map(row => row.slice().reverse());\r\n}\r\n\r\nfunction findSpawnKeys(before, after) {\r\n  const keys = [];\r\n  for (let r = 0; r < before.length; r++) {\r\n    for (let c = 0; c < before[r].length; c++) {\r\n      if (before[r][c] === 0 && after[r][c] !== 0) {\r\n        keys.push(`${r}-${c}`);\r\n      }\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\n// ------------------ major merge logic ------------------\r\nfunction traceLineLeftWithMoves(line) {\r\n  const entries = [];  // all non-null elements and their buffers\r\n  for (let c = 0; c < line.length; c++) if (line[c] !== 0)\r\n    entries.push({ v: line[c], fromC: c });\r\n\r\n  const merged = [];\r\n  const moves = [];\r\n  const mergedDestCols = [];\r\n  let gained = 0;\r\n  let target = 0;\r\n\r\n  for (let i = 0; i < entries.length; i++) {\r\n    const a = entries[i];\r\n    const b = entries[i + 1];\r\n\r\n    if (b && canMerge(a.v, b.v)) {\r\n      const val = mergedValue(a.v, b.v);\r\n      merged.push(val);\r\n      moves.push({ fromC: a.fromC, toC: target, v: a.v, willMerge: true });\r\n      moves.push({ fromC: b.fromC, toC: target, v: b.v, willMerge: true });\r\n      mergedDestCols.push(target);\r\n      gained += val;\r\n      target++;\r\n      i++;\r\n    }\r\n    else {\r\n      merged.push(a.v);\r\n      moves.push({ fromC: a.fromC, toC: target, v: a.v, willMerge: false });\r\n      target++;\r\n    }\r\n  }\r\n\r\n  while (merged.length < line.length) merged.push(0);\r\n  const moved = moves.some(m => m.fromC !== m.toC);\r\n\r\n  return { merged, moves, mergedDestCols, moved, gained };\r\n}\r\n\r\nfunction computeMoveWithTrace(board, dir) {\r\n  const N = board.length;\r\n\r\n  let working = board.map(r => r.slice());\r\n  if (dir === \"up\") working = rotateBoardLeft(working);\r\n  else if (dir === \"down\") working = rotateBoardRight(working);\r\n  else if (dir === \"right\") working = flipBoard(working);\r\n\r\n  const mergedRows = [];\r\n  const rowMoves = [];\r\n  const mergedDestsWorking = [];\r\n  let gainedTotal = 0;\r\n  let movedAny = false;\r\n\r\n  for (let r = 0; r < N; r++) {\r\n    const { merged, moves, mergedDestCols, moved, gained } = traceLineLeftWithMoves(working[r]);\r\n    mergedRows.push(merged);\r\n    rowMoves.push({ r, moves });\r\n    mergedDestCols.forEach(c => mergedDestsWorking.push({ r, c }));\r\n    if (moved) movedAny = true;\r\n    gainedTotal += gained;\r\n  }\r\n\r\n  let next =\r\n    dir === \"up\" ? rotateBoardRight(mergedRows) :\r\n      dir === \"down\" ? rotateBoardLeft(mergedRows) :\r\n        dir === \"right\" ? flipBoard(mergedRows) :\r\n          mergedRows;\r\n\r\n  function fromWorkingToOriginal_src(rw, cw) {\r\n    if (dir === \"left\") return { r: rw, c: cw };\r\n    if (dir === \"up\") return { r: cw, c: N - 1 - rw };\r\n    if (dir === \"down\") return { r: N - 1 - cw, c: rw };\r\n\r\n    return { r: rw, c: N - 1 - cw };\r\n  }\r\n  function fromWorkingToOriginal_dst(rw, cw) {\r\n\r\n    if (dir === \"left\") return { r: rw, c: cw };\r\n    if (dir === \"up\") return { r: cw, c: N - 1 - rw };\r\n    if (dir === \"down\") return { r: N - 1 - cw, c: rw };\r\n\r\n    return { r: rw, c: N - 1 - cw };\r\n  }\r\n\r\n  const moves = [];\r\n  rowMoves.forEach(({ r: rw, moves: ms }) => {\r\n    ms.forEach(m => {\r\n      const src = fromWorkingToOriginal_src(rw, m.fromC);\r\n      const dst = fromWorkingToOriginal_dst(rw, m.toC);\r\n      moves.push({ fromR: src.r, fromC: src.c, toR: dst.r, toC: dst.c, v: m.v, willMerge: m.willMerge });\r\n    });\r\n  });\r\n\r\n  const mergedDest = mergedDestsWorking.map(({ r: rw, c: cw }) => fromWorkingToOriginal_dst(rw, cw));\r\n\r\n  return { next, movedAny, gainedTotal, moves, mergedDest };\r\n}\r\n\r\nfunction isGameOver(board) {\r\n  if (getEmptyCells(board).length > 0) return false;\r\n\r\n  const N = board.length;\r\n\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      const v = board[r][c];\r\n\r\n      if (c + 1 < N) {\r\n        const w = board[r][c + 1];\r\n        const canMergeRight = (v === w && v !== WILDCARD) || ((v === WILDCARD) !== (w === WILDCARD));\r\n        if (canMergeRight) return false;\r\n      }\r\n\r\n      if (r + 1 < N) {\r\n        const w = board[r + 1][c];\r\n        const canMergeDown = (v === w && v !== WILDCARD) || ((v === WILDCARD) !== (w === WILDCARD));\r\n        if (canMergeDown) return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// ------------------ style & render ------------------\r\nfunction tileClass(v) {\r\n  return v === WILDCARD ? \"cell2048 wild2048\" : `cell2048 v${v || 0}`;\r\n}\r\n\r\nfunction keyOf(r, c) { return `${r}-${c}`; }\r\n\r\nfunction cellXY(r, c) {\r\n  const x = c * (CELL_PX + GAP_PX);\r\n  const y = r * (CELL_PX + GAP_PX);\r\n  return { x, y };\r\n}\r\n\r\n// ------------------ result to return ------------------\r\nexport default function Game2048() {\r\n  // inner const:\r\n  const [board, setBoard] = useState(() => initBoard());\r\n  const [score, setScore] = useState(0);\r\n  const [over, setOver] = useState(false);\r\n\r\n  const [animTiles, setAnimTiles] = useState([]);\r\n  const [animPlay, setAnimPlay] = useState(false);\r\n  const [movingFrom, setMovingFrom] = useState(() => new Set());\r\n  const [flashCells, setFlashCells] = useState(() => new Set());\r\n  const [spawnCells, setSpawnCells] = useState(() => new Set());\r\n\r\n  const SPAWN_MS = 140; // the time for spawn animation\r\n  const MOVE_MS = 65;  // the time for move animation\r\n  const FLASH_MS = 140;\r\n\r\n  // inner functions:\r\n  function handleNewGame() {\r\n    const b = initBoard();\r\n    setBoard(initBoard());\r\n    setScore(0);\r\n    setOver(false);\r\n    setAnimTiles([]);\r\n    setMovingFrom(new Set());\r\n    setFlashCells(new Set());\r\n    setAnimPlay(false);\r\n\r\n    const initSpawn = [];\r\n    for (let r = 0; r < SIZE; r++) {\r\n      for (let c = 0; c < SIZE; c++) {\r\n        if (b[r][c] !== 0) initSpawn.push(`${r}-${c}`);\r\n      }\r\n    }\r\n    setSpawnCells(new Set(initSpawn));\r\n    window.setTimeout(() => setSpawnCells(new Set()), SPAWN_MS);\r\n  }\r\n\r\n  function handleMove(dir) {\r\n    if (over) return;\r\n\r\n    const { next, movedAny, gainedTotal, moves, mergedDest } = computeMoveWithTrace(board, dir);\r\n    if (!movedAny) return;\r\n\r\n    setAnimTiles(moves);\r\n    setMovingFrom(new Set(moves.map(m => keyOf(m.fromR, m.fromC))));\r\n    setAnimPlay(false);\r\n\r\n    requestAnimationFrame(() => requestAnimationFrame(() => setAnimPlay(true)));\r\n\r\n    window.setTimeout(() => {\r\n      const withTile = addRandomTile(next);\r\n      const spawn = findSpawnKeys(next, withTile);\r\n      if (spawn.length) {\r\n        setSpawnCells(new Set(spawn));\r\n        window.setTimeout(() => setSpawnCells(new Set()), SPAWN_MS);\r\n      }\r\n\r\n      setBoard(withTile);\r\n      setScore(s => s + gainedTotal);\r\n      setAnimTiles([]);\r\n      setMovingFrom(new Set());\r\n      setFlashCells(new Set(mergedDest.map(p => keyOf(p.r, p.c))));\r\n      if (isGameOver(withTile)) setOver(true);\r\n\r\n      window.setTimeout(() => setFlashCells(new Set()), FLASH_MS);\r\n    }, MOVE_MS);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onKey = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      const map = {\r\n        arrowup: \"up\",\r\n        arrowdown: \"down\",\r\n        arrowleft: \"left\",\r\n        arrowright: \"right\",\r\n        w: \"up\",\r\n        s: \"down\",\r\n        a: \"left\",\r\n        d: \"right\",\r\n      };\r\n      const dir = map[key];\r\n      if (!dir) return;\r\n      e.preventDefault();\r\n      handleMove(dir);\r\n    };\r\n    window.addEventListener(\"keydown\", onKey);\r\n    return () => window.removeEventListener(\"keydown\", onKey);\r\n  }, [board, over]);\r\n\r\n  return (\r\n    <div className=\"container2048\">\r\n\r\n      <div className=\"instruction2048\">\r\n        <p>Control Keys:</p>\r\n        <p>Buttons below or \"AWSD\" on your keyboard</p>\r\n        <p>Note:</p>\r\n        <p>?? can merge with any numbers but itself</p>\r\n      </div>\r\n\r\n      <div className=\"header2048\">\r\n        <h2 className=\"title2048\">2048</h2>\r\n        <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\r\n          <span className=\"score2048\">Score: {score}</span>\r\n          <button className=\"btn2048\" onClick={handleNewGame}>New Game</button>\r\n        </div>\r\n      </div>\r\n\r\n      {over && (<p className=\"GameOver2048\"> Game Over </p>)}\r\n\r\n      <div className=\"boardWrap2048\">\r\n        <div className=\"grid2048\" style={{ \"--cols\": SIZE }}>\r\n          {board.map((row, r) =>\r\n            row.map((value, c) => {\r\n              const k = keyOf(r, c);\r\n              const hide = movingFrom.has(k);\r\n              const flash = flashCells.has(k);\r\n              const isSpawn = spawnCells.has(k);\r\n\r\n              const cls = tileClass(value) + \r\n                (hide     ? \" movingOut2048\"  : \"\") +\r\n                (flash    ? \" flash2048\"      : \"\") +\r\n                (isSpawn  ? \" spawn2048\"      : \"\");\r\n\r\n              return (\r\n                <div key={k} className={cls}>\r\n                  {value === WILDCARD ? \"??\" : (value || \"\")}\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n        {/* render the moving nums */}\r\n        <div className=\"animLayer2048\">\r\n          {animTiles.map((m, idx) => {\r\n            const from = cellXY(m.fromR, m.fromC);\r\n            const to = cellXY(m.toR, m.toC);\r\n            const dx = to.x - from.x;\r\n            const dy = to.y - from.y;\r\n\r\n            const style = {\r\n              left: from.x,\r\n              top: from.y,\r\n              transform: `translate3d(${animPlay ? dx : 0}px, ${animPlay ? dy : 0}px, 0)`,\r\n              transitionDuration: `${MOVE_MS}ms`,\r\n            };\r\n\r\n            return (\r\n              <div key={idx} className=\"movingTile2048\">\r\n                <div className={`movingInner2048 ${tileClass(m.v)}`} style={style}>\r\n                  {m.v === WILDCARD ? \"??\" : m.v}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"controls2048\" role=\"group\" aria-label=\"Move controls\">\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"up\")} aria-label=\"Up\">🔼</button>\r\n        <div />\r\n\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"left\")} aria-label=\"Left\">◀️</button>\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"right\")} aria-label=\"Right\">▶️</button>\r\n\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"down\")} aria-label=\"Down\">🔽</button>\r\n        <div />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}"],"names":["SIZE","WILDCARD","CELL_PX","GAP_PX","emptyBoard","size","Array","from","length","fill","getEmptyCells","board","cells","r","c","push","addRandomTile","empties","Math","floor","random","next","map","row","slice","initBoard","b","canMerge","a","aWild","mergedValue","rotateBoardLeft","N","res","rotateBoardRight","flipBoard","reverse","traceLineLeftWithMoves","line","entries","v","fromC","merged","moves","mergedDestCols","gained","target","i","val","toC","willMerge","moved","some","m","computeMoveWithTrace","dir","working","mergedRows","rowMoves","mergedDestsWorking","gainedTotal","movedAny","forEach","fromWorkingToOriginal_dst","rw","cw","_ref","ms","src","fromWorkingToOriginal_src","dst","fromR","toR","mergedDest","_ref2","tileClass","concat","keyOf","cellXY","x","y","Game2048","setBoard","useState","score","setScore","over","setOver","animTiles","setAnimTiles","animPlay","setAnimPlay","movingFrom","setMovingFrom","Set","flashCells","setFlashCells","spawnCells","setSpawnCells","handleMove","requestAnimationFrame","window","setTimeout","withTile","spawn","before","after","keys","findSpawnKeys","s","p","w","isGameOver","useEffect","onKey","e","arrowup","arrowdown","arrowleft","arrowright","d","key","toLowerCase","preventDefault","addEventListener","removeEventListener","_jsxs","className","children","_jsx","style","display","gap","alignItems","onClick","initSpawn","value","k","hide","has","flash","isSpawn","cls","idx","to","dx","dy","left","top","transform","transitionDuration","role"],"sourceRoot":""}