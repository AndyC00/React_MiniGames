{"version":3,"file":"static/js/476.65a6968b.chunk.js","mappings":"uJAGA,MAAMA,EAAQ,EAAGC,EAAQ,EAAGC,EAAQ,EAC9BC,EAAa,CAAE,CAACH,GAAQ,GAAI,CAACC,GAAQ,SAAK,CAACC,GAAQ,UAY1C,SAASE,EAAMC,GAA4B,IAA3B,KAAEC,EAAO,GAAE,KAAEC,EAAO,IAAIF,EACnD,MAAOG,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAAMC,OAVnBC,EAUoCN,EATnDO,MAAMC,KAAK,CAAEC,OAAQH,GAAK,IAAMC,MAAMD,GAAGI,KAAKhB,IADzD,IAA0BY,KAWfK,EAASC,IAAcR,EAAAA,EAAAA,UAAST,IAChCkB,EAAQC,IAAaV,EAAAA,EAAAA,UAAS,OAC9BW,EAAaC,IAAkBZ,EAAAA,EAAAA,UAAS,IAQ/C,OACIa,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACnBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YACRF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,SACKR,IAAYhB,GAAQyB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBAAcC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBAElDN,IACGI,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,WACON,IAAWlB,GAAQyB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBAAcC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAK5DC,EAAAA,EAAAA,KAAA,OACIF,UAAU,eACVG,MAAO,CACHC,oBAAoB,UAADC,OAAYvB,EAAI,MAAAuB,OAAKtB,EAAI,OAC5CuB,iBAAiB,UAADD,OAAYvB,EAAI,MAAAuB,OAAKtB,EAAI,QAC3CkB,SAEDjB,EAAMuB,IAAI,CAACC,EAAKC,IACbD,EAAID,IAAI,CAACG,EAAKC,KACV,MAAMC,EAAYf,EAAYgB,KAC1BC,IAAA,IAAEC,EAAIC,GAAGF,EAAA,OAAKC,IAAON,GAAKO,IAAOL,IAErC,OACIT,EAAAA,EAAAA,KAAA,UAEIF,UAAS,eAAAK,OAAiBO,EAAY,MAAQ,IAC9CK,QAASA,IAnCrC,SAAyBR,EAAGE,GACxBO,QAAQC,IAAI,uBAADd,OAAwBI,EAAC,UAAAJ,OAASM,GAEjD,CAgC2CS,CAAgBX,EAAGE,GAClC,oBAAAN,OAAmBI,EAAI,EAAC,UAAAJ,OAASM,EAAI,EAAC,MAAAN,OAAKK,IAAQlC,EAAQ,QAAUkC,IAAQjC,EAAQ,QAAU,SAE/F0B,MAAO,CAAEkB,SAAS,GAADhB,OAAKiB,KAAKC,MAAa,GAAPxC,GAAW,OAAOkB,SAElDtB,EAAW+B,IAAI,GAAAL,OAPRI,EAAC,KAAAJ,OAAIM,WAe7C,C","sources":["Gomoku.js"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\r\n\r\n// const parameters\r\nconst EMPTY = 0, BLACK = 1, WHITE = 2;\r\nconst PIECE_CHAR = { [EMPTY]: \"\", [BLACK]: \"●\", [WHITE]: \"○\" };\r\n\r\n// create the chesse board\r\nfunction createEmptyBoard(n) {\r\n    return Array.from({ length: n }, () => Array(n).fill(EMPTY));\r\n}\r\n\r\n/**\r\n * @param {number} size - size of the board\r\n * @param {number} cell - pixiel per block\r\n */\r\n\r\nexport default function Gomoku({ size = 15, cell = 36 }) {\r\n    const [board, setBoard] = useState(() => createEmptyBoard(size));\r\n    const [current, setCurrent] = useState(BLACK); // black first\r\n    const [winner, setWinner] = useState(null);\r\n    const [winningLine, setWinningLine] = useState([]);\r\n\r\n    // TODO: place chesse and next round\r\n    function handleCellClick(r, c) {\r\n        console.log(`clicked cell -> row:${r}, col:${c}`);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"gomoku\">\r\n            <div className=\"gomoku-panel\">\r\n                <strong>Gomoku</strong>\r\n                <span>\r\n                    Turn: {current === BLACK ? <b>Black ●</b> : <b>White ○</b>}\r\n                </span>\r\n                {winner && (\r\n                    <span>\r\n                        Winner: {winner === BLACK ? <b>Black ●</b> : <b>White ○</b>}\r\n                    </span>\r\n                )}\r\n            </div>\r\n\r\n            <div\r\n                className=\"gomoku-board\"\r\n                style={{\r\n                    gridTemplateColumns: `repeat(${size}, ${cell}px)`,\r\n                    gridTemplateRows: `repeat(${size}, ${cell}px)`,\r\n                }}\r\n            >\r\n                {board.map((row, r) =>\r\n                    row.map((val, c) => {\r\n                        const isWinCell = winningLine.some(\r\n                            ([rr, cc]) => rr === r && cc === c\r\n                        );\r\n                        return (\r\n                            <button\r\n                                key={`${r}-${c}`}\r\n                                className={`gomoku-cell ${isWinCell ? \"win\" : \"\"}`}\r\n                                onClick={() => handleCellClick(r, c)}\r\n                                aria-label={`row ${r + 1}, col ${c + 1}, ${val === EMPTY ? \"empty\" : val === BLACK ? \"black\" : \"white\"\r\n                                    }`}\r\n                                style={{ fontSize: `${Math.floor(cell * 0.7)}px` }}\r\n                            >\r\n                                {PIECE_CHAR[val]}\r\n                            </button>\r\n                        );\r\n                    })\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"names":["EMPTY","BLACK","WHITE","PIECE_CHAR","Gomoku","_ref","size","cell","board","setBoard","useState","createEmptyBoard","n","Array","from","length","fill","current","setCurrent","winner","setWinner","winningLine","setWinningLine","_jsxs","className","children","_jsx","style","gridTemplateColumns","concat","gridTemplateRows","map","row","r","val","c","isWinCell","some","_ref2","rr","cc","onClick","console","log","handleCellClick","fontSize","Math","floor"],"sourceRoot":""}