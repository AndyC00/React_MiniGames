{"version":3,"file":"static/js/212.9661ca98.chunk.js","mappings":"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","sources":["2048.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst SIZE = 4;\r\n\r\n// helper functions:\r\nfunction emptyBoard(size) {\r\n  return Array.from({ length: size }, () => Array(size).fill(0));\r\n}\r\n\r\nfunction getEmptyCells(board) {\r\n  const cells = [];\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[r].length; c++) {\r\n      if (board[r][c] === 0) cells.push([r, c]);\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction addRandomTile(board) {\r\n  const empties = getEmptyCells(board);\r\n  if (empties.length === 0) return board;\r\n\r\n  const [r, c] = empties[Math.floor(Math.random() * empties.length)];\r\n  const next = board.map(row => row.slice());\r\n  next[r][c] = Math.random() < 0.9 ? 2 : 4; // 10% chance to be 4\r\n  return next;\r\n}\r\n\r\nfunction initBoard() {\r\n  let b = emptyBoard(SIZE);\r\n  b = addRandomTile(b);\r\n  b = addRandomTile(b);\r\n  return b;\r\n}\r\n\r\nfunction mergeLineLeft(line) {\r\n  const nums = line.filter(v => v !== 0);\r\n  const merged = [];\r\n  let gained = 0;\r\n  for (let i = 0; i < nums.length; i++) {\r\n    if (i < nums.length - 1 && nums[i] === nums[i + 1]) {\r\n      const val = nums[i] * 2;\r\n      merged.push(val);\r\n      gained += val;\r\n      i++;\r\n    }\r\n    else {\r\n      merged.push(nums[i]);\r\n    }\r\n  }\r\n  while (merged.length < line.length) {\r\n    merged.push(0);\r\n  }\r\n  const moved = merged.some((v, i) => v !== line[i]);\r\n\r\n  return { merged, moved, gained };\r\n}\r\n\r\nfunction rotateBoardLeft(board) {\r\n  const N = board.length;\r\n  const res = emptyBoard(N);\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      res[N - 1 - c][r] = board[r][c];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction rotateBoardRight(board) {\r\n  const N = board.length;\r\n  const res = emptyBoard(N);\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      res[c][N - 1 - r] = board[r][c];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction flipBoard(board) {\r\n  return board.map(row => row.slice().reverse());\r\n}\r\n\r\nfunction moveBoard(board, dir) {\r\n  let working = board.map(row => row.slice());\r\n\r\n  if (dir === \"up\") {\r\n    working = rotateBoardLeft(working);\r\n  }\r\n  else if (dir === \"down\") {\r\n    working = rotateBoardRight(working);\r\n  }\r\n  else if (dir === \"right\") {\r\n    working = flipBoard(working);\r\n  }\r\n\r\n  let movedAny = false;\r\n  let gainedTotal = 0;\r\n  const mergedRows = working.map(row => {\r\n    const { merged, moved, gained } = mergeLineLeft(row);\r\n    if (moved) movedAny = true;\r\n    gainedTotal += gained;\r\n    return merged;\r\n  });\r\n\r\n  let next =\r\n    dir === \"up\"\r\n      ? rotateBoardRight(mergedRows)\r\n      : dir === \"down\"\r\n        ? rotateBoardLeft(mergedRows)\r\n        : dir === \"right\"\r\n          ? flipBoard(mergedRows)\r\n          : mergedRows;\r\n\r\n  return { next, moved: movedAny, gained: gainedTotal };\r\n}\r\n\r\nfunction isGameOver(board) {\r\n  if (getEmptyCells(board).length > 0) return false;\r\n\r\n  const N = board.length;\r\n\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      const v = board[r][c];\r\n\r\n      if ((r + 1 < N && board[r + 1][c] === v) || (c + 1 < N && board[r][c + 1] === v)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction tileClass(v) {\r\n  return `cell2048 v${v || 0}`;\r\n}\r\n\r\nexport default function Game2048() {\r\n  // inner const:\r\n  const [board, setBoard] = useState(() => initBoard());\r\n  const [score, setScore] = useState(0);\r\n  const [over, setOver] = useState(false);\r\n\r\n  // inner functions:\r\n  function handleNewGame() {\r\n    setBoard(initBoard());\r\n    setScore(0);\r\n    setOver(false);\r\n  }\r\n\r\n  function handleMove(dir) {\r\n    if (over) return;\r\n    setBoard(prev => {\r\n      const { next, moved, gained } = moveBoard(prev, dir);\r\n      if (!moved) return prev;\r\n\r\n      setScore(s => s + gained);\r\n      const withTile = addRandomTile(next);\r\n\r\n      if (isGameOver(withTile)) setOver(true);\r\n\r\n      return withTile;\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onKey = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      const map = {\r\n        arrowup: \"up\",\r\n        arrowdown: \"down\",\r\n        arrowleft: \"left\",\r\n        arrowright: \"right\",\r\n        w: \"up\",\r\n        s: \"down\",\r\n        a: \"left\",\r\n        d: \"right\",\r\n      };\r\n      const dir = map[key];\r\n      if (!dir) return;\r\n      e.preventDefault();\r\n      handleMove(dir);\r\n    };\r\n    window.addEventListener(\"keydown\", onKey);\r\n    return () => window.removeEventListener(\"keydown\", onKey);\r\n  }, [over]);\r\n\r\n  return (\r\n   <>\r\n      <div className=\"header2048\">\r\n        <h2 style={{ margin: 0 }}>2048</h2>\r\n        <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\r\n          <span style={{ fontWeight: 700 }}>Score: {score}</span>\r\n          <button className=\"btn2048\" onClick={handleNewGame}>New Game</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid2048\" style={{ \"--cols\": SIZE }}>\r\n        {board.map((row, r) =>\r\n          row.map((value, c) => (\r\n            <div key={`${r}-${c}`} className={tileClass(value)}>\r\n              {value || \"\"}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"controls2048\" role=\"group\" aria-label=\"Move controls\">\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"up\")} aria-label=\"Up\">↑</button>\r\n        <div />\r\n\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"left\")} aria-label=\"Left\">←</button>\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"right\")} aria-label=\"Right\">→</button>\r\n\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"down\")} aria-label=\"Down\">↓</button>\r\n        <div />\r\n      </div>\r\n\r\n      {over && (\r\n        <p className = \"GameOver2048\"> Game Over </p>\r\n      )}\r\n    </>\r\n  );\r\n}"],"names":["SIZE","emptyBoard","size","Array","from","length","fill","getEmptyCells","board","cells","r","c","push","addRandomTile","empties","Math","floor","random","next","map","row","slice","initBoard","b","rotateBoardLeft","N","res","rotateBoardRight","flipBoard","reverse","Game2048","setBoard","useState","score","setScore","over","setOver","handleMove","dir","prev","moved","gained","working","movedAny","gainedTotal","mergedRows","merged","line","nums","filter","v","i","val","some","mergeLineLeft","moveBoard","s","withTile","isGameOver","useEffect","onKey","e","arrowup","arrowdown","arrowleft","arrowright","w","a","d","key","toLowerCase","preventDefault","window","addEventListener","removeEventListener","_jsxs","_Fragment","children","className","_jsx","style","margin","display","gap","alignItems","fontWeight","onClick","value","concat","role"],"sourceRoot":""}