{"version":3,"file":"static/js/212.f769445c.chunk.js","mappings":"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","sources":["2048.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst SIZE = 4;\r\nconst WILDCARD = -1;\r\n\r\n// helper functions:\r\nfunction emptyBoard(size) {\r\n  return Array.from({ length: size }, () => Array(size).fill(0));\r\n}\r\n\r\nfunction getEmptyCells(board) {\r\n  const cells = [];\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[r].length; c++) {\r\n      if (board[r][c] === 0) cells.push([r, c]);\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction addRandomTile(board) {\r\n  const empties = getEmptyCells(board);\r\n  if (empties.length === 0) return board;\r\n\r\n  const [r, c] = empties[Math.floor(Math.random() * empties.length)];\r\n  const next = board.map(row => row.slice());\r\n  \r\n  if(Math.random() < 0.3)  next[r][c] = WILDCARD;  // 30% chance to generate ??\r\n  else next[r][c] = Math.random() < 0.9 ? 2 : 4; // then the lefting 10% chance to be 4\r\n\r\n  return next;\r\n}\r\n\r\nfunction initBoard() {\r\n  let b = emptyBoard(SIZE);\r\n  b = addRandomTile(b);\r\n  b = addRandomTile(b);\r\n  return b;\r\n}\r\n\r\n// major merge logic:\r\nfunction mergeLineLeft(line) {\r\n  const nums = line.filter(v => v !== 0);\r\n  const merged = [];\r\n  let gained = 0;\r\n\r\n  for(let i = 0; i < nums.length; i++)  {\r\n    const a = nums[i];\r\n    const b = nums[i+1];\r\n    const aWild = a === WILDCARD;\r\n    const bWild = b === WILDCARD;\r\n\r\n    const canMerge = (i < nums.length - 1) && ((a === b && !aWild) || (aWild !== bWild))\r\n    if (canMerge) {\r\n      const num = aWild ? b : a;\r\n      const val = num * 2;\r\n      merged.push(val);\r\n      gained += val;\r\n      i ++; // skip the next one to avoid duplicated merge\r\n    }\r\n    else {\r\n      merged.push(a);\r\n    }\r\n  }\r\n\r\n  while (merged.length < line.length) merged.push(0);\r\n  const moved = merged.some((v, i) => v !== line[i]);\r\n\r\n  return {merged, moved, gained};\r\n}\r\n\r\nfunction rotateBoardLeft(board) {\r\n  const N = board.length;\r\n  const res = emptyBoard(N);\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      res[N - 1 - c][r] = board[r][c];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction rotateBoardRight(board) {\r\n  const N = board.length;\r\n  const res = emptyBoard(N);\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      res[c][N - 1 - r] = board[r][c];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction flipBoard(board) {\r\n  return board.map(row => row.slice().reverse());\r\n}\r\n\r\n// apply move and merge\r\nfunction moveBoard(board, dir) {\r\n  let working = board.map(row => row.slice());\r\n\r\n  if (dir === \"up\") {\r\n    working = rotateBoardLeft(working);\r\n  }\r\n  else if (dir === \"down\") {\r\n    working = rotateBoardRight(working);\r\n  }\r\n  else if (dir === \"right\") {\r\n    working = flipBoard(working);\r\n  }\r\n\r\n  let movedAny = false;\r\n  let gainedTotal = 0;\r\n  const mergedRows = working.map(row => {\r\n    const { merged, moved, gained } = mergeLineLeft(row);\r\n    if (moved) movedAny = true;\r\n    gainedTotal += gained;\r\n    return merged;\r\n  });\r\n\r\n  let next =\r\n    dir === \"up\"\r\n      ? rotateBoardRight(mergedRows)\r\n      : dir === \"down\"\r\n        ? rotateBoardLeft(mergedRows)\r\n        : dir === \"right\"\r\n          ? flipBoard(mergedRows)\r\n          : mergedRows;\r\n\r\n  return { next, moved: movedAny, gained: gainedTotal };\r\n}\r\n\r\nfunction isGameOver(board) {\r\n  if (getEmptyCells(board).length > 0) return false;\r\n\r\n  const N = board.length;\r\n\r\n  for (let r = 0; r < N; r++) {\r\n    for (let c = 0; c < N; c++) {\r\n      const v = board[r][c];\r\n\r\n      if (c + 1 < N) {\r\n        const w = board[r][c + 1];\r\n        const canMergeRight = (v === w && v !== WILDCARD) || ((v === WILDCARD) !== (w === WILDCARD));\r\n        if (canMergeRight) return false;\r\n      }\r\n\r\n      if (r + 1 < N) {\r\n        const w = board[r + 1][c];\r\n        const canMergeDown = (v === w && v !== WILDCARD) || ((v === WILDCARD) !== (w === WILDCARD));\r\n        if (canMergeDown) return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction tileClass(v) {\r\n  return v === WILDCARD ? \"cell2048 wild2048\" : `cell2048 v${v || 0}`;\r\n}\r\n\r\nexport default function Game2048() {\r\n  // inner const:\r\n  const [board, setBoard] = useState(() => initBoard());\r\n  const [score, setScore] = useState(0);\r\n  const [over, setOver] = useState(false);\r\n\r\n  // inner functions:\r\n  function handleNewGame() {\r\n    setBoard(initBoard());\r\n    setScore(0);\r\n    setOver(false);\r\n  }\r\n\r\n  function handleMove(dir) {\r\n    if (over) return;\r\n    setBoard(prev => {\r\n      const { next, moved, gained } = moveBoard(prev, dir);\r\n      if (!moved) return prev;\r\n\r\n      setScore(s => s + gained);\r\n      const withTile = addRandomTile(next);\r\n\r\n      if (isGameOver(withTile)) setOver(true);\r\n\r\n      return withTile;\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onKey = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      const map = {\r\n        arrowup: \"up\",\r\n        arrowdown: \"down\",\r\n        arrowleft: \"left\",\r\n        arrowright: \"right\",\r\n        w: \"up\",\r\n        s: \"down\",\r\n        a: \"left\",\r\n        d: \"right\",\r\n      };\r\n      const dir = map[key];\r\n      if (!dir) return;\r\n      e.preventDefault();\r\n      handleMove(dir);\r\n    };\r\n    window.addEventListener(\"keydown\", onKey);\r\n    return () => window.removeEventListener(\"keydown\", onKey);\r\n  }, [over]);\r\n\r\n  return (\r\n   <div className=\"container2048\">\r\n\r\n      <div className=\"instruction2048\">\r\n        <p>Control Keys:</p>\r\n        <p>Buttons below or \"AWSD\" on your keyboard</p>\r\n        <p>Note:</p>\r\n        <p>?? can merge with any numbers but itself</p>\r\n      </div>\r\n\r\n      <div className=\"header2048\">\r\n        <h2 className=\"title2048\">2048</h2>\r\n        <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\r\n          <span className=\"score2048\">Score: {score}</span>\r\n          <button className=\"btn2048\" onClick={handleNewGame}>New Game</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid2048\" style={{ \"--cols\": SIZE }}>\r\n        {board.map((row, r) =>\r\n          row.map((value, c) => (\r\n            <div key={`${r}-${c}`} className={tileClass(value)}>\r\n              {value === WILDCARD ? \"??\" : value || \"\"}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"controls2048\" role=\"group\" aria-label=\"Move controls\">\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"up\")} aria-label=\"Up\">🔼</button>\r\n        <div />\r\n\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"left\")} aria-label=\"Left\">◀️</button>\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"right\")} aria-label=\"Right\">▶️</button>\r\n\r\n        <div />\r\n        <button className=\"btn2048 arrowBtn2048\" onClick={() => handleMove(\"down\")} aria-label=\"Down\">🔽</button>\r\n        <div />\r\n      </div>\r\n\r\n      {over && (<p className = \"GameOver2048\"> Game Over </p>)}\r\n\r\n    </div>\r\n  );\r\n}"],"names":["SIZE","WILDCARD","emptyBoard","size","Array","from","length","fill","getEmptyCells","board","cells","r","c","push","addRandomTile","empties","Math","floor","random","next","map","row","slice","initBoard","b","rotateBoardLeft","N","res","rotateBoardRight","flipBoard","reverse","moveBoard","dir","working","movedAny","gainedTotal","mergedRows","merged","moved","gained","line","nums","filter","v","i","a","aWild","bWild","val","some","mergeLineLeft","Game2048","setBoard","useState","score","setScore","over","setOver","handleMove","prev","s","withTile","w","isGameOver","useEffect","onKey","e","arrowup","arrowdown","arrowleft","arrowright","d","key","toLowerCase","preventDefault","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","style","display","gap","alignItems","onClick","value","concat","role"],"sourceRoot":""}